{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["// contentlayer.config.ts\r\nimport { defineDocumentType, makeSource } from \"contentlayer/source-files\";\r\nimport remarkGfm from \"remark-gfm\";\r\n\r\n// Define the Download Document Type\r\nconst Download = defineDocumentType(() => ({\r\n  name: \"Download\",\r\n  filePathPattern: \"downloads/*.mdx\",\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: { type: \"string\", required: true },\r\n    slug: { type: \"string\", required: true },\r\n    date: { type: \"string\", required: true },\r\n    author: { type: \"string\", required: true },\r\n    excerpt: { type: \"string\", required: true },\r\n    readTime: { type: \"string\", required: true },\r\n    category: { type: \"string\", required: true },\r\n    tags: { type: \"list\", of: { type: \"string\" }, required: false },\r\n    coverImage: { type: \"string\", required: true },\r\n    coverAspect: { type: \"string\", required: true },\r\n    coverFit: { type: \"string\", required: true },\r\n    coverPosition: { type: \"string\", required: true },\r\n    pdfPath: { type: \"string\", required: false },\r\n    file: { type: \"string\", required: false },\r\n    description: { type: \"string\", required: false }, // Added based on content errors\r\n  },\r\n  computedFields: {\r\n    url_path: {\r\n      type: \"string\",\r\n      resolve: (doc) => `/downloads/${doc.slug}`,\r\n    },\r\n  },\r\n}));\r\n\r\n// Define the Event Document Type (Includes all required fields)\r\nconst Event = defineDocumentType(() => ({\r\n  name: \"Event\",\r\n  filePathPattern: \"events/*.mdx\",\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: { type: \"string\", required: true },\r\n    slug: { type: \"string\", required: true },\r\n    date: { type: \"string\", required: true },\r\n    endDate: { type: \"string\", required: false },\r\n    location: { type: \"string\", required: false },\r\n    summary: { type: \"string\", required: false },\r\n    heroImage: { type: \"string\", required: false },\r\n    tags: { type: \"list\", of: { type: \"string\" }, required: false },\r\n    ctaHref: { type: \"string\", required: false }, \r\n    ctaLabel: { type: \"string\", required: false },\r\n    chatham: { type: \"boolean\", required: false }, // Added based on content errors\r\n    resources: { type: \"json\", required: false }, // Added based on content errors\r\n    related: { type: \"list\", of: { type: \"string\" }, required: false }, // Added based on leadership-workshop content\r\n  },\r\n  computedFields: {\r\n    url_path: {\r\n      type: \"string\",\r\n      resolve: (doc) => `/events/${doc.slug}`,\r\n    },\r\n  },\r\n}));\r\n\r\n// Define the Post Document Type (Includes all required fields)\r\nconst Post = defineDocumentType(() => ({\r\n  name: \"Post\",\r\n  filePathPattern: \"blog/*.mdx\", \r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: { type: \"string\", required: true },\r\n    slug: { type: \"string\", required: true },\r\n    date: { type: \"string\", required: true },\r\n    author: { type: \"string\", required: true },\r\n    excerpt: { type: \"string\", required: true },\r\n    readTime: { type: \"string\", required: true },\r\n    tags: { type: \"list\", of: { type: \"string\" }, required: false },\r\n    coverImage: { type: \"string\", required: true },\r\n    coverAspect: { type: \"string\", required: true },\r\n    coverFit: { type: \"string\", required: true },\r\n    coverPosition: { type: \"string\", required: true },\r\n    \r\n    // Added based on content errors/provided content\r\n    description: { type: \"string\", required: false },\r\n    ogTitle: { type: \"string\", required: false },\r\n    ogDescription: { type: \"string\", required: false },\r\n    socialCaption: { type: \"string\", required: false },\r\n    category: { type: \"string\", required: false },\r\n    draft: { type: \"boolean\", required: false },\r\n  },\r\n  computedFields: {\r\n    url_path: {\r\n      type: \"string\",\r\n      resolve: (doc) => `/blog/${doc.slug}`,\r\n    },\r\n  },\r\n}));\r\n\r\n// Define the Book Document Type (Includes all required fields)\r\nconst Book = defineDocumentType(() => ({\r\n  name: \"Book\",\r\n  filePathPattern: \"books/*.mdx\", \r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: { type: \"string\", required: true },\r\n    slug: { type: \"string\", required: true },\r\n    \r\n    // Added based on content errors/provided content\r\n    author: { type: \"string\", required: false },\r\n    excerpt: { type: \"string\", required: false },\r\n    genre: { type: \"string\", required: false },\r\n    coverImage: { type: \"string\", required: false },\r\n    buyLink: { type: \"string\", required: false },\r\n    downloadPdf: { type: \"string\", required: false },\r\n    downloadEpub: { type: \"string\", required: false },\r\n    description: { type: \"string\", required: false },\r\n    date: { type: \"string\", required: false },\r\n    tags: { type: \"list\", of: { type: \"string\" }, required: false },\r\n  },\r\n}));\r\n\r\n// Define the Resource Document Type\r\nconst Resource = defineDocumentType(() => ({\r\n  name: \"Resource\",\r\n  filePathPattern: \"resources/*.md\", \r\n  contentType: \"markdown\", // Fixed: \"md\" to \"markdown\"\r\n  fields: {\r\n    title: { type: \"string\", required: true },\r\n    // NOTE: Add other required resource fields here if they exist\r\n  },\r\n}));\r\n\r\n// Define a new Strategy Document Type to capture the mis-categorized file\r\nconst Strategy = defineDocumentType(() => ({\r\n  name: \"Strategy\",\r\n  filePathPattern: \"strategy/*.md\",\r\n  contentType: \"markdown\",\r\n  fields: {\r\n    title: { type: \"string\", required: true },\r\n    // NOTE: Define fields based on frontmatter in strategy/events-blueprint.md\r\n  },\r\n}));\r\n\r\n\r\nexport default makeSource({\r\n  contentDirPath: \"content\",\r\n  // Register ALL document types, including the new Strategy type\r\n  documentTypes: [Download, Event, Post, Book, Resource, Strategy], \r\n  mdx: {\r\n    remarkPlugins: [remarkGfm],\r\n    rehypePlugins: [],\r\n  },\r\n});"],
  "mappings": "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",
  "names": []
}

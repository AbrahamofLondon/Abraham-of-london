// NOTE This file is auto-generated by Contentlayer

import type { Markdown, MDX, ImageFieldData, IsoDateTimeString } from 'contentlayer/core'
import * as Local from 'contentlayer/source-files'

export { isType } from 'contentlayer/client'

export type { Markdown, MDX, ImageFieldData, IsoDateTimeString }

/** Document types */
export type Book = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Book'
  title: string
  slug: string
  /** MDX file body */
  body: MDX

}

export type Download = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Download'
  title: string
  slug: string
  date: string
  author: string
  excerpt: string
  readTime: string
  category: string
  tags?: string[] | undefined
  coverImage: string
  coverAspect: string
  coverFit: string
  coverPosition: string
  pdfPath?: string | undefined
  file?: string | undefined
  /** MDX file body */
  body: MDX
  url_path: string
}

export type Event = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Event'
  title: string
  slug: string
  date: string
  endDate?: string | undefined
  location?: string | undefined
  summary?: string | undefined
  heroImage?: string | undefined
  tags?: string[] | undefined
  ctaHref?: string | undefined
  ctaLabel?: string | undefined
  /** MDX file body */
  body: MDX
  url_path: string
}

export type Post = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Post'
  title: string
  slug: string
  date: string
  author: string
  excerpt: string
  readTime: string
  tags?: string[] | undefined
  coverImage: string
  coverAspect: string
  coverFit: string
  coverPosition: string
  /** MDX file body */
  body: MDX
  url_path: string
}

export type Resource = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Resource'
  title: string
  /** Markdown file body */
  body: Markdown

}  

/** Nested types */
  

/** Helper types */

export type AllTypes = DocumentTypes | NestedTypes
export type AllTypeNames = DocumentTypeNames | NestedTypeNames

export type DocumentTypes = Book | Download | Event | Post | Resource
export type DocumentTypeNames = 'Book' | 'Download' | 'Event' | 'Post' | 'Resource'

export type NestedTypes = never
export type NestedTypeNames = never

export type DataExports = {
  allDocuments: DocumentTypes[]
  allDownloads: Download[]
  allEvents: Event[]
  allPosts: Post[]
  allBooks: Book[]
  allResources: Resource[]
}


export interface ContentlayerGenTypes {
  documentTypes: DocumentTypes
  documentTypeMap: DocumentTypeMap
  documentTypeNames: DocumentTypeNames
  nestedTypes: NestedTypes
  nestedTypeMap: NestedTypeMap
  nestedTypeNames: NestedTypeNames
  allTypeNames: AllTypeNames
  dataExports: DataExports
}

declare global {
  interface ContentlayerGen extends ContentlayerGenTypes {}
}

export type DocumentTypeMap = {
  Book: Book
  Download: Download
  Event: Event
  Post: Post
  Resource: Resource
}

export type NestedTypeMap = {

}

 
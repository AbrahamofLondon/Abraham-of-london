name: Build & Commit PDFs

on:
  push:
    branches: [main]
    # Rebuild PDFs when content or the PDF script changes
    paths:
      - "content/**"
      - "scripts/grand-master.mjs" # Assuming this is your main script
      - "package.json"
      - "package-lock.json"
      - "public/downloads/**" # allow manual edits to retrigger
  workflow_dispatch: {}

# üîë MOVED: Removed top-level permissions for better security, now defined in the job
concurrency:
  group: pdfs-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pdfs:
    # üîë NEW: Restricting 'contents: write' permission to only this job for security
    permissions:
      contents: write 
      
    # Restrict execution to the repository owner or outside of the bot itself
    if: github.repository_owner == github.actor || github.actor != 'github-actions[bot]'
    runs-on: ubuntu-22.04

    env:
      NODE_ENV: production
      PUPPETEER_CACHE_DIR: ${{ runner.tool_cache }}/puppeteer
      # Flag for the Grand Master script to indicate it's running in CI
      CI_ENVIRONMENT: "1"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Fetch full history needed for the git commit/diff steps
          fetch-depth: 0

      - name: Use Node.js 20 (LTS)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Cache Puppeteer browser binaries
        uses: actions/cache@v4
        with:
          path: ${{ env.PUPPETEER_CACHE_DIR }}
          key: puppeteer-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            puppeteer-${{ runner.os }}-

      - name: Install dependencies (prod-optimized)
        run: npm ci --omit=dev

      - name: Install Chrome for Puppeteer
        run: npx puppeteer browsers install chrome

      - name: 1Ô∏è‚É£ Execute Content Healing & Build (Prepares the site)
        # üîë UPDATED: Using the new descriptive script 'content:heal' from package.json
        run: npm run content:heal

      - name: 2Ô∏è‚É£ Generate PDFs
        # üîë UPDATED: Using the new descriptive script 'pdfs:generate' from package.json
        run: npm run pdfs:generate

      - name: Commit changes (if any)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Add all potentially changed files (source fixes + new PDFs)
          git add -A

          if ! git diff --cached --quiet; then
            # The [skip ci] prevents this commit from restarting the workflow, avoiding loops.
            git commit -m "chore(pdfs): auto-generate PDFs and commit source fixes [skip ci]"
            git push
          else
            echo "No changes (PDFs or source fixes) to commit."
          fi
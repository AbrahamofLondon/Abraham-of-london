// netlify/functions/send-contact.tsx
import type { Handler } from "@netlify/functions"; // Resolved with package
import { sendEmail } from "@netlify/emails"; // Requires @netlify/plugin-emails
import React from "react"; // Import React for the email component

type HeadersMap = Record<string, string>;
type NetlifyResult = { statusCode: number; headers?: HeadersMap; body: string };

// Minimal event shape we actually use
type EventLike = {
  httpMethod: string;
  headers: Record<string, string | undefined>;
  body?: string | null;
};

const json = (obj: unknown) => JSON.stringify(obj);

// React component for the email body
const ContactEmail: React.FC<{ name: string; email: string; message: string }> = ({ name, email, message }) => (
  <div>
    <p>Name: {name}</p>
    <p>Email: {email}</p>
    <p>Message: {message.split("\n").map((line, index) => (
      <span key={index}>{line}<br /></span>
    ))}</p>
  </div>
);

export const handler: Handler = async (event: EventLike): Promise<NetlifyResult> => {
  // CORS preflight
  if (event.httpMethod === "OPTIONS") {
    return {
      statusCode: 204,
      headers: {
        "Access-Control-Allow-Origin": event.headers.origin ?? "*",
        "Access-Control-Allow-Methods": "POST, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type",
        "Access-Control-Max-Age": "86400",
      },
      body: "",
    };
  }

  if (event.httpMethod !== "POST") {
    return {
      statusCode: 405,
      headers: { Allow: "POST" },
      body: "Method Not Allowed",
    };
  }

  const cors: HeadersMap = {
    "Access-Control-Allow-Origin": event.headers.origin ?? "*",
    "Access-Control-Allow-Methods": "POST, OPTIONS",
    "Access-Control-Allow-Headers": "Content-Type",
    "Content-Type": "application/json",
  };

  try {
    const { name = "", email = "", subject = "", message = "" } = JSON.parse(event.body ?? "{}");

    if (!email || !message) {
      return { statusCode: 400, headers: cors, body: json({ error: "Required: email, message" }) };
    }

    // Attempt to send email; fallback to logging if email service fails
    try {
      await sendEmail({
        from: "contact@abraham-of-london.netlify.app",
        to: "info@abrahamoflondon.org", // Updated to correct email
        subject: subject || "New Contact Form Submission",
        react: <ContactEmail name={name} email={email} message={message} />, // Use React component
      });
    } catch (emailError) {
      console.error("Email sending failed:", emailError);
      // Fallback to logging instead of failing the request
    }

    return { statusCode: 200, headers: cors, body: json({ ok: true }) };
  } catch (error) {
    console.error("Function execution failed:", error);
    return { statusCode: 500, headers: cors, body: json({ error: "Internal Server Error" }) };
  }
};

export default handler;
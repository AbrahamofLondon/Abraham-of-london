// src/app/dynamic/page.tsx

import React from 'react';

// Explicitly ensure dynamic rendering by forcing no-cache behavior
// This is redundant if 'cache: 'no-store'' is used, but good practice for clarity.
export const dynamic = 'force-dynamic';

// --- Data Model for the API response ---
interface StockData {
  symbol: string;
  price: number;
  changePercent: number;
  timestamp: string;
}

/**
 * Fetches real-time market data for a stock.
 * NOTE: Replace the placeholder URL with a functional, production API endpoint.
 * This structure forces the page to be rendered dynamically (SSR).
 */
async function fetchRealtimeStock(ticker: string): Promise<StockData | null> {
  const mockApiUrl = `https://api.example-finance.com/realtime/${ticker}`;

  // 💡 In a real-world scenario, you would use a secured endpoint here.
  // For demonstration, we'll return mock data on a successful fetch to illustrate the structure.

  try {
    // ⚠️ IMPORTANT: 'cache: 'no-store'' forces a fresh fetch on every request.
    const res = await fetch(mockApiUrl, { cache: 'no-store' });

    if (!res.ok) {
      // Simulate an API error response for a non-200 status
      console.error(`API fetch failed with status: ${res.status}`);
      return null;
    }

    // Simulate successful JSON response
    // const data = await res.json();
    const mockData: StockData = {
        symbol: ticker,
        price: Math.floor(Math.random() * (2000 - 1000 + 1) + 1000) / 100, // $10.00 to $20.00
        changePercent: Math.floor(Math.random() * (10 - (-10) + 1) + (-10)) / 100, // -10% to +10%
        timestamp: new Date().toISOString(),
    };
    return mockData;

  } catch (error) {
    console.error("Error fetching stock data:", error);
    return null;
  }
}

export default async function RealtimeStockPage() {
  const TICKER = 'TSLA'; // Target stock ticker
  const data = await fetchRealtimeStock(TICKER);

  const priceColor = data
    ? data.changePercent >= 0
      ? 'text-green-500'
      : 'text-red-500'
    : 'text-gray-500';

  const changeSign = data && data.changePercent >= 0 ? '+' : '';

  // --- Rendering Logic ---

  if (!data) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[50vh] bg-gray-50 p-6 rounded-lg shadow-md">
        <h1 className="text-3xl font-bold text-red-600 mb-4">Error Loading Data</h1>
        <p className="text-lg text-gray-700">
          Could not fetch real-time data for {TICKER}. Please check the API status.
        </p>
        <p className="text-sm text-gray-500 mt-2">
          Rendered at: {new Date().toLocaleTimeString()}
        </p>
      </div>
    );
  }

  return (
    <div className="flex flex-col items-center justify-center p-8 bg-white min-h-[50vh]">
      <div className="w-full max-w-lg p-6 bg-gray-50 rounded-xl shadow-2xl border border-gray-200">
        <h1 className="text-4xl font-extrabold text-gray-800 mb-2">
          Real-Time Market Data
        </h1>
        <p className="text-sm text-gray-500 mb-8 border-b pb-4">
          This entire component is rendered dynamically on every request. (cache: 'no-store')
        </p>

        <div className="flex items-center justify-between mb-6">
          <span className="text-6xl font-black">{data.symbol}</span>
          <div className="text-right">
            <p className={`text-4xl font-bold ${priceColor}`}>
              ${data.price.toFixed(2)}
            </p>
            <p className={`text-xl font-medium ${priceColor}`}>
              {changeSign}{(data.changePercent * 100).toFixed(2)}%
            </p>
          </div>
        </div>

        <div className="border-t pt-4 text-sm text-gray-600">
          <p>Last Updated (Server Render Time):</p>
          <p className="font-mono text-gray-800">
            {new Date(data.timestamp).toLocaleString()}
          </p>
        </div>
      </div>
    </div>
  );
}
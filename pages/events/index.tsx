//pages/events/index.tsx"useclient";import*asReactfrom"react";importHeadfrom"next/head";importLinkfrom"next/link";import{useRouter}from"next/router";importtype{GetStaticProps}from"next";import{allEvents}from"contentlayer/generated";importtype{Event}from"contentlayer/generated";importclsxfrom"clsx";importEventCardfrom"@/components/events/EventCard";importLayoutfrom"@/components/Layout";importSectionHeadingfrom"@/components/ui/SectionHeading";importButtonfrom"@/components/ui/Button";import{OgHead}from"@/lib/seo";import{isUpcoming}from"@/lib/events";importtype{EventMeta}from"@/lib/events";typeProps={events:EventMeta[]};constnormalize=(s="")=>s.toLowerCase();constChip=({label,active,onClick,}:{label:string;active?:boolean;onClick:()=>void;})=>(<buttontype="button"onClick={onClick}className={clsx("rounded-fullpx-3py-1text-smtransition",active?"bg-foresttext-creamborderborder-forest":"bg-whitetext-[color:var(--color-on-secondary)/0.8]borderborder-lightGreyhover:text-deepCharcoal")}>{label}</button>);exportdefaultfunctionEventsIndex({events}:Props){constrouter=useRouter();const{q="",when="upcoming",sort="soonest",loc=""}=router.queryas{q?:string;when?:"all"|"upcoming"|"past";sort?:"soonest"|"latest";loc?:string;};const[localQuery,setLocalQuery]=React.useState(q);constupdateSearchQuery=React.useCallback((value?:string)=>{constnext=newURLSearchParams(router.queryasRecord<string,string>);if(value&&value.length)next.set("q",value);elsenext.delete("q");router.replace({pathname:"/events",query:Object.fromEntries(next)},undefined,{shallow:true,});},//âœ…onlydependon`router`[router]);React.useEffect(()=>{consttimer=setTimeout(()=>{if(localQuery.trim()!==q.trim()){updateSearchQuery(localQuery.trim()||undefined);}},300);return()=>clearTimeout(timer);},[localQuery,q,updateSearchQuery]);constfilteredEvents=React.useMemo(()=>{letlist=events.slice();if(when==="upcoming")list=list.filter((e)=>isUpcoming(e.date));elseif(when==="past")list=list.filter((e)=>!isUpcoming(e.date));if(loc.trim()){constneedle=normalize(loc);list=list.filter((e)=>normalize(e.location||"").includes(needle));}if(q.trim()){constneedle=normalize(q);list=list.filter((e)=>[e.title,e.summary||"",e.location||""].some((field)=>normalize(field).includes(needle)));}list.sort((a,b)=>{constdateA=newDate(a.date??"").valueOf();constdateB=newDate(b.date??"").valueOf();returnsort==="soonest"?dateA-dateB:dateB-dateA;});returnlist;},[events,q,when,sort,loc]);consttotalCount=events.length;constupcomingCount=events.filter((e)=>isUpcoming(e.date)).length;constpastCount=totalCount-upcomingCount;constsetParam=(key:string,value?:string)=>{constnext=newURLSearchParams(router.queryasRecord<string,string>);if(value&&value.length)next.set(key,value);elsenext.delete(key);router.replace({pathname:"/events",query:Object.fromEntries(next)},undefined,{shallow:true,});};consthandleReset=()=>{setLocalQuery("");router.replace({pathname:"/events"},undefined,{shallow:true});};consthandleSearchChange=(e:React.ChangeEvent<HTMLInputElement>)=>{setLocalQuery(e.target.value);};React.useEffect(()=>{setLocalQuery(q);},[q]);return(<LayoutpageTitle="Events"><OgHeadtitle="Events·AbrahamofLondon"description="Talks,salons,andworkshops.SelectsessionsrunasChathamRooms(offtherecord)."path="/events"/>{/*Controlsbar(Tabs/Chips)*/}<sectionclassName="border-bborder-lightGrey/70bg-warmWhite/60"><divclassName="mx-autoflexmax-w-7xlflex-wrapitems-centerjustify-betweengap-3px-4py-3text-sm"><navaria-label="Breadcrumb"className="text-[color:var(--color-on-secondary)/0.7]"><olclassName="flexitems-centergap-2"><li><Linkhref="/"className="hover:text-deepCharcoal"prefetch={false}>Home</Link></li><liaria-hidden="true">/</li><liclassName="text-[color:var(--color-on-secondary)/0.8]">Events</li>{q?(<><liaria-hidden="true">/</li><liclassName="text-[color:var(--color-on-secondary)/0.6]">"{q}"</li></>):null}</ol></nav><divclassName="flexitems-centergap-2"><Chiplabel={`All(${totalCount})`}active={when==="all"}onClick={()=>setParam("when","all")}/><Chiplabel={`Upcoming(${upcomingCount})`}active={when==="upcoming"}onClick={()=>setParam("when","upcoming")}/><Chiplabel={`Past(${pastCount})`}active={when==="past"}onClick={()=>setParam("when","past")}/></div></div></section>{/*Heading+filters(Search/Sort)*/}<sectionclassName="bg-white"><divclassName="mx-automax-w-7xlpx-4py-6"><SectionHeadingeyebrow="Calendar"title="Events"subtitle="Filterbytextorlocation,sortbydate,andexploredetails."align="left"withDivider/><divclassName="mt-6flexflex-colgap-3md:flex-rowmd:items-centermd:justify-between"><divclassName="flexgap-2"><inputaria-label="Searchevents"placeholder="Searchtitle,description,location…"onChange={handleSearchChange}value={localQuery}className="w-fullmd:w-80rounded-lgborderborder-lightGreypx-3py-2text-sm"/></div><divclassName="flexgap-2"><inputaria-label="Filterbylocation"placeholder="Filterbylocation"onChange={(e)=>setParam("loc",e.target.value.trim()||undefined)}defaultValue={loc}className="w-fullmd:w-56rounded-lgborderborder-lightGreypx-3py-2text-sm"/><selectaria-label="Sort"value={sort}onChange={(e)=>setParam("sort",e.target.value)}className="rounded-lgborderborder-lightGreypx-3py-2text-sm"><optionvalue="soonest">Soonestfirst</option><optionvalue="latest">Latestfirst</option></select>{(q||loc||when!=="upcoming"||sort!=="soonest")&&(<Buttonvariant="secondary"size="sm"onClick={handleReset}>Reset</Button>)}</div></div></div></section>{/*List*/}<sectionclassName="bg-whitepb-16pt-2"aria-live="polite"><divclassName="mx-automax-w-7xlpx-4">{filteredEvents.length===0?(<divclassName="rounded-2xlborderborder-lightGreybg-warmWhitepx-4py-10text-centertext-[color:var(--color-on-secondary)/0.7]">Noeventsmatchyourfilters.</div>):(<ulclassName="gridgrid-cols-1gap-6sm:grid-cols-2lg:grid-cols-3">{filteredEvents.map((ev)=>(<EventCardkey={ev.slug}slug={ev.slug}title={ev.title}date={ev.date}location={ev.location}description={ev.summary}tags={ev.tags??undefined}heroImage={ev.heroImage??undefined}resources={ev.resources?{downloads:ev.resources.downloads??[],reads:ev.resources.reads??[]}:null}/>))}</ul>)}</div></section></Layout>);}exportconstgetStaticProps:GetStaticProps<Props>=async()=>{constevents=allEvents.map((e)=>({slug:e.slug,title:e.title,date:e.date,location:(easany).location??null,summary:(easany).summary??null,tags:(easany).tags??null,heroImage:(easany).heroImage??null,resources:(easany).resources??null,})).sort((a,b)=>+newDate(a.dateasunknownasstring)-+newDate(b.dateasunknownasstring));return{props:{events:eventsasEventMeta[]},revalidate:60};};
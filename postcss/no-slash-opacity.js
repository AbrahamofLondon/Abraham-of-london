'use strict';
const TOKENS=["forest","cream","deepCharcoal","accent","primary","on-primary","on-secondary","secondary"];
const UTILITIES=["bg","text","border","ring","fill","stroke","outline","from","via","to","shadow"];
const tokenGroup=TOKENS.sort((a,b)=>b.length-a.length).map(x=>x.replace(/[-\/\\^$*+?.()|[\]{}]/g,'\\$&')).join('|');
const utilGroup=UTILITIES.join('|');
const RE=String.raw`\b(?:${utilGroup})-(?:${tokenGroup})\/(?:\d{1,3})\b`;
const TOKEN_TO_VAR={forest:'--color-primary',cream:'--color-on-primary',deepCharcoal:'--color-on-secondary',accent:'--color-accent',primary:'--color-primary','on-primary':'--color-on-primary','on-secondary':'--color-on-secondary',secondary:'--color-secondary'};
function pctToDec(p){const n=Math.max(0,Math.min(100,parseInt(p,10)||0));if(n===0)return'0';if(n===100)return'1';return(n/100).toFixed(2).replace(/0+$/,'').replace(/\.$/,'');}
function rewriteToken(tw){const m=tw.match(new RegExp(String.raw`^(${utilGroup})-(${tokenGroup})\/(\d{1,3})$`));if(!m)return tw;const[,u,t,p]=m;const v=TOKEN_TO_VAR[t]||'--color-primary';const d=pctToDec(p);return u==='shadow'?`shadow-[color:var(${v})/${d}]`:`${u}-[color:var(${v})/${d}]`;}
function pluginCreator(opts={}){const mode=(opts.mode||process.env.NO_SLASH_OPACITY_MODE||'error').toLowerCase();const rx=new RegExp(RE,'g');return{postcssPlugin:'no-slash-opacity',AtRule(at){if(at.name!=='apply')return;const val=String(at.params||'');const hits=val.match(rx)||[];if(!hits.length)return;if(mode==='fix'){let next=val;for(const h of hits)next=next.replace(h,rewriteToken(h));at.params=next;return;}const sample=hits[0];const suggestion=rewriteToken(sample);throw at.error(`Forbidden slash opacity token "${sample}" in @apply. Use arbitrary color instead: "${suggestion}". Set NO_SLASH_OPACITY_MODE=fix to auto-rewrite in @apply.`);},Declaration(decl){const val=String(decl.value||'');const m=val.match(rx);if(!m)return;if(mode==='fix'){throw decl.error(`Forbidden slash opacity token "${m[0]}" in "${decl.prop}". Move it into @apply or a className so it can be rewritten.`);}throw decl.error(`Forbidden slash opacity token "${m[0]}" in "${decl.prop}".`);}}}
pluginCreator.postcss=true;module.exports=pluginCreator;
